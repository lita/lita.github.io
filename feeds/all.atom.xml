<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lita Cho</title><link href="http://litacho.github.io/" rel="alternate"></link><link href="http://lita.github.io/feeds/all.atom.xml" rel="self"></link><id>http://litacho.github.io/</id><updated>2014-06-17T16:18:00-04:00</updated><entry><title>2 weeks into internship. Mock Module and more!</title><link href="http://litacho.github.io/mock.html" rel="alternate"></link><updated>2014-06-17T16:18:00-04:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-06-17:mock.html</id><summary type="html">&lt;p&gt;I was inspired by &lt;a href="http://jvns.ca/blog/2014/06/13/asking-questions-is-a-superpower/"&gt;Julia Evan's blog&lt;/a&gt; post about listing what she knows and what she doesn't know, and how asking questions is a super power! I try to be good about asking questions when I don't know something, but I feel like my questions are too vague. I really want to get better at boiling my question down!&lt;/p&gt;
&lt;p&gt;Thus, I thought I take some time to list out what I don't know, specifically about unit testing, since that is all I have been doing this week! I'm been tasked with writing unit tests for the entire turtle module! Can you believe there isn't a single unit test for this module at all, even though it is a standard library?! It also surprises me that turtle is all in one file, but that's a different story.&lt;/p&gt;
&lt;h2&gt;What I don't know&lt;/h2&gt;
&lt;h4&gt;GUI Testing&lt;/h4&gt;
&lt;p&gt;I am still not 100% sure how GUIs are run through unit testing. In Tkinter, it looks like the widget is initialized and test just the internal variables within the widget class. I thought they would compare pixel by pixel, checking if the GUI is the same or not. That might be because I often did that at Dreamworks for testing the renderer.&lt;/p&gt;
&lt;p&gt;After talking with Ingrid, it looks like you can mock mouse-events by generating your own events through Tkinter. Then you pass in those events to Turtle to see how it reacts.&lt;/p&gt;
&lt;h4&gt;The test.support module&lt;/h4&gt;
&lt;p&gt;CPython has an internal module called &lt;code&gt;test.support&lt;/code&gt;, which holds all the utility functions for its unit tests. It has useful features, such as &lt;code&gt;use_resource&lt;/code&gt;, where you can pass along command-line flags to your unit tests. We use this a lot for Turtle/Tkinter testing, as we need to check if GUIs are enabled in our environment. Thus rather than running the check for every module, an outside program that checks if GUIs are enabled and passes a 'gui' flag to all the other GUI unit tests if it passes. If not, then a warning appears, and the GUI unit tests don't run.&lt;/p&gt;
&lt;p&gt;However, the support module has a LOT of stuff in it that I don't know about. I really want to study it more so I know what is available to me when I write my tests.&lt;/p&gt;
&lt;h4&gt;The mock module&lt;/h4&gt;
&lt;p&gt;Another thing I don't know really well is the &lt;code&gt;mock&lt;/code&gt; module. I definitely feel like my tests can be more robust and cleaner with this module. This module has so many features! My favorite so far is the &lt;code&gt;patch&lt;/code&gt; decorator, where you can override the behavior of a function specifically for that test case. I have used it on programs that print to &lt;code&gt;stdout&lt;/code&gt;. Before, I would have to override &lt;code&gt;sys.stdout&lt;/code&gt; manually and make sure to set it back correctly, or my print function is borked.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lets_print_something&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Dude, I totally printed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestPrinting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_lets_print_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sysout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;lets_print_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
                          &lt;span class="s"&gt;&amp;quot;Dude, I totally printed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sysout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This totally felt ugly to me. It's like remembering to &lt;code&gt;close&lt;/code&gt; your file objects. I never do that anymore due to the &lt;code&gt;with&lt;/code&gt; statement. However, with the &lt;code&gt;patch&lt;/code&gt; decorator, this test looks so much cleaner!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestPrintingMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sys.stdout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_callable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_lets_print_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_stdout&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;lets_print_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mock_stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                          &lt;span class="s"&gt;&amp;quot;Dude, I totally printed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The patch decorator passes a &lt;code&gt;MagicMock&lt;/code&gt; object by default, but I've changed it to give me a &lt;code&gt;StringIO&lt;/code&gt; object using the &lt;code&gt;new_callable&lt;/code&gt; argument. The decorator will handle passing this argument in, so you don't need to pass it anything to make it run.&lt;/p&gt;
&lt;p&gt;I just barely scratched the surface. Your unit tests don't need to create side affects! &lt;a href="http://www.toptal.com/python/an-introduction-to-mocking-in-python"&gt;Naftuli Tzvi Kay&lt;/a&gt; has a great blog post about mocking in Python and how to test if your program called &lt;code&gt;rm&lt;/code&gt; without generating any files!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/unittest.mock.html#module-unittest.mock"&gt;The Python documentation on mocking&lt;/a&gt; is also very good. However, it is only available on 3.3 and up. You will need to &lt;code&gt;pip install mock&lt;/code&gt; for earlier versions of python.&lt;/p&gt;
&lt;p&gt;Alex Marandon also has a great blog post about &lt;a href="http://alexmarandon.com/articles/python_mock_gotchas/"&gt;Python Mock Gotchas&lt;/a&gt;. I haven't gotten enough experience with the module where I have run into these, but I feel like it is a time saver!&lt;/p&gt;
&lt;p&gt;This blog post has gotten way bigger than I expected. I really want to thank Amandine Lee, a fellow Hacker Schooler, about showing me the &lt;code&gt;mock&lt;/code&gt; module and her general insights to unit testing! Also, my fellow intern, Ingrid Cheung, for helping me with GUI testing! Together, Turtle will have better test coverage!!!&lt;/p&gt;
&lt;p&gt;I need to write a blog post about the basics of Turtle. I hope to get to it soon!&lt;/p&gt;</summary><category term="opw"></category><category term="python"></category><category term="tkinter"></category></entry><entry><title>OPW and Tkinter!</title><link href="http://litacho.github.io/opw-intro.html" rel="alternate"></link><updated>2014-05-29T16:18:00-04:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-05-29:opw-intro.html</id><summary type="html">&lt;p&gt;After Hacker School, I got accepted to the GNOME: Outreach Program for Women (OPW), where I get to spend a summer working on CPython with none other than &lt;a href="https://twitter.com/jessicamckellar"&gt;Jessica Mckellar&lt;/a&gt;. For the next three months, I'm working on making GUIs better in Python. &lt;/p&gt;
&lt;p&gt;It has been a week and half already, and so far I am getting my hands dirty by fixing bugs and code reviewing other people's patches. &lt;/p&gt;
&lt;p&gt;For this blog post, I thought I'd talk about Tkinter, the GUI module in Python, and how to start using it! &lt;/p&gt;
&lt;p&gt;Note: All the following examples will only work with Python 3. I'm moving on! GOOD-BYE PYTHON 2.7!!&lt;/p&gt;
&lt;p&gt;In GUI programming, I like to think of the GUI as a tree or a graph. The root is your main GUI window, and within it contains different elements (Labels, Buttons, Images, TextBoxes, etc. Also known as Widgets), which are your children to your tree.&lt;/p&gt;
&lt;p&gt;Let's start with Hello World. Python is cool because I can interactively mess with a module using the interpreter.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tk&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that a window pops up! Yay, that is your root GUI window with nothing in it! Don't close this window! This will destroy the root GUI object, and you won't be able to get it back! If you did, no big deal, just instantiate another one.&lt;/p&gt;
&lt;p&gt;Let's add a label with the word, "Hello World!"&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wait, what? Nothing has happened... what is going on here? Where is my label?&lt;/p&gt;
&lt;p&gt;Lets briefly go over Geometry Managers! Geometry Managers manage where widgets should go within their parent. They determine the placement of the widgets they are in charge of. There are different kinds of Geometry Managers within Tkinter. However, the most popular one is called "The Packer". The Packer sets the size of a widget by determining the size of it's children first and packing it closely together. You can put frames and padding to get the look you desire, but ultimately, your window is going to packed to the minimal size by default.&lt;/p&gt;
&lt;p&gt;We haven't specified what type of geometry manager to use. Let's go ahead and use "The Packer" as our geometry manager! It is super easy! All we need to do is call the &lt;code&gt;pack()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes! Our widget shows up! We can pass in settings to &lt;code&gt;pack&lt;/code&gt; method. These settings adjust where the widget is going to appear within its container, and how it will behave when the main application window is resized. Lets try put another Label.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default, the packer sets the widgets on top of each other as the window expands. However, we can change this!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you didn't expand your window, then the text didn't change. However, if you expand the window, one of the labels stays on the top, while the other goes toward to the left! There are other settings, which you can find in the &lt;a href="https://docs.python.org/3.4/library/tkinter.html"&gt;Tkinter documentation.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lets add a button that generates more labels!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addCats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MOAR CATS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CATS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addCats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Woah! There is a lot going on here! &lt;code&gt;addCats&lt;/code&gt; generates more labels. When we create a Button widget, we need to give it a function that will be called when the button gets clicked. However, you can't pass it any elements. HIGHER ORDER FUNCTIONS TO THE RESCUE! Since we want to pass in the root always, we can create a lambda function that will return a function with root applied to it. We could also use the partial module as well:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;

&lt;span class="n"&gt;addCats_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addCats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CATS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, so we made quiet a mess here. I don't know about you, but this is what my GUI looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/tk.png" style="width: 20%; height: 20%"/&gt;​&lt;/p&gt;
&lt;p&gt;Lets add a button that quits the GUI and destroys all the widgets properly!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;QUIT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now a QUIT button should appear, and when you press it, the window should close! Your root object is no longer available to play with though! You will need to create a new Tk object. &lt;/p&gt;
&lt;p&gt;But it was fun just playing around the Tkinter module in the interpreter. Whenever I got into a weird state, I would just destroy the root and start over.&lt;/p&gt;
&lt;h2&gt;Unit testing in Tkinter&lt;/h2&gt;
&lt;p&gt;I am going through how the Python project runs their unit tests, and it is pretty impressive. They have test modules in Lib/test folder. For Tkinter, the test modules are test_ttk_guionly.py, test_ttk_textonly.py and test_tk.py. However, these modules call other test modules within the Lib/tkinter/test module. These modules test individual GUI objects by creating them and checking the hard values in the widget. &lt;/p&gt;
&lt;p&gt;However, &lt;a href="http://bugs.python.org/issue17496"&gt;not all the Tkinter tests run successfully on Mac OS X&lt;/a&gt;. So I have to run them on Ubuntu, which is a bummer. &lt;/p&gt;
&lt;p&gt;I learned the hard way that once you close the window or call &lt;code&gt;root.destory()&lt;/code&gt;, that object is gone forever and you need to instantiate the object again to get a new one. &lt;a href="http://bugs.python.org/issue21585"&gt;I was trying to run the same set of tests for a GUI object with a different setting within the same module.&lt;/a&gt; However, the testing suite uses the same root widget for all the test run from each module, then destroys the root widget. So when I tried to run the tests again from that module, I couldn't because the root widget was destroyed from the previous time it ran.&lt;/p&gt;
&lt;p&gt;I had to make a completely separate testing module with that setting change, which seemed kind of bloated to me.&lt;/p&gt;
&lt;p&gt;Anyway, I am still a beginner to Tkinter and Turtle modules. Turtle seems like a awesome module to play with. I will be telling you more about that next time!&lt;/p&gt;</summary><category term="opw"></category><category term="python"></category><category term="tkinter"></category></entry><entry><title>Path Module</title><link href="http://litacho.github.io/path-and-import.html" rel="alternate"></link><updated>2014-04-13T00:00:00-04:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-04-13:path-and-import.html</id><summary type="html">&lt;p&gt;In order to take a break from making Flask apps, my Bittorrent client, messing with various databases, and reading HTTP protocol documentation, I wanted to write about Python, something I know.&lt;/p&gt;
&lt;p&gt;While working at Dreamworks Animation, my favorite module was the "path" module. This is a 3rd party module dealing with file paths. It makes paths as first class objects, allowing you to do some common operations on them.  We had our own version at Dreamworks, which hooks into our proprietary software. But path.py is still useful by itself. This is way better than using os.path. Hopefully, after this blog post, you will never use os.path... ever.&lt;/p&gt;
&lt;p&gt;You might think module sounds boring. I mean, file directories... really? Well, when you are working with hundreds of thousands of images (30 frames in a second, 90 minutes in an animated film, so we are talking 30 x 60 x 90=162,000 images for an entire movie, not including composite layers that make up one image), this module is a godsend. We were constantly renaming, deleting, copying and moving files all over the place. Most of the marketing tasks were frankensteining some frames together in order to meet deadlines. &lt;/p&gt;
&lt;p&gt;But you can use this module in everyday tasks! Like cleaning up unnecessary data or making a script to rename some music files in Python! Here are some examples of using this module! If you are following along, please start in an empty directory.&lt;/p&gt;
&lt;p&gt;First lets install this module.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, time to start playing with it!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a path object that is pointed to your current directory! One of my favorite features is how easy and readable it is to append directories to the path. For example, you can do this!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;long&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;directory&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tree&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How awesome is that?? You can even ask if the directory exists or not. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets go ahead and make this directory!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How easy was that?! You can also give it permissions with the &lt;code&gt;mode&lt;/code&gt; flag! By default, permissions is set to 511.&lt;/p&gt;
&lt;p&gt;Let's make a lot of directories!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;make_fake_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;make_fake_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function creates 10 directories with random directory depth, within a range from 0 to 10. Lets see if this worked&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./plugins&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets create a file at the end of directory depth!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walkdirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;myfile&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;touch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;walkdirs&lt;/code&gt; returns a generator that iterates through your directory structure until you've looked at every folder. It is basically doing in-order traversal. &lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;walkfiles&lt;/code&gt; to see if we created the necessary files!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walkfiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="p"&gt;.....&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
   &lt;span class="p"&gt;.....&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, lets try to rename my numbered directories into letters! Just because we can. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;renameDirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdigit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;renameDirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitpath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;renameDirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Woah! A lot of stuff going on here! I wrote a lot of these little recursive functions a lot, but you can do the same thing as &lt;code&gt;walkdirs&lt;/code&gt;. Basically, I loop over all the directories in the current directory, and check to see if they have any directories. If so, I recurse. When the function returns, I rename the directory to the ASCII equivalent by using &lt;code&gt;ord&lt;/code&gt;. The &lt;code&gt;rename&lt;/code&gt; path is a little tricky, as it needs the full path from where your Python module is running from. That is why I call &lt;code&gt;splitpath&lt;/code&gt; in order to get the parent directory. Now, we have folders like this!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;       &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;       &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;       &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;       &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;       &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;       &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;       &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;       &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;       &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have a directory structure like this! (Note: I shorten the results for brevity.)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So now that we are done testing, time to delete these useless directories! &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmtree&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will delete the entire directory tree of the current folder. How cool is that? Don't run this if you have any import files or directories in your root folder!!!&lt;/p&gt;
&lt;p&gt;Now that you know the basics, check out this blog about how to write a script a clean-up script for your website!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://freepythontips.wordpress.com/2014/01/23/python-101-writing-a-cleanup-script/"&gt;Python 101: Writing a cleanup script&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy scripting!&lt;/p&gt;</summary><category term="python"></category><category term="hacker school"></category><category term="path module"></category><category term="previous life"></category></entry><entry><title>Databases</title><link href="http://litacho.github.io/databases.html" rel="alternate"></link><updated>2014-03-23T00:00:00-04:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-03-23:databases.html</id><summary type="html">&lt;p&gt;I've been learning a lot about databases lately, and what sort of databases are out there currently. A fellow Hacker Schooler pointed me &lt;a href="http://opensourcebridge.org/sessions/557"&gt;A Dozen Databases in 45 Minutes&lt;/a&gt; by Eric Redmond, which was a pretty good overview of whats out there.&lt;/p&gt;
&lt;p&gt;After listening to this presentation and talking with another Hacker Schooler about databases, I thought I'd share what I learned. I am mostly going to go deeper with Open Source databases, so anyone can try using them at home.&lt;/p&gt;
&lt;h2&gt;Type: Relational Databases&lt;/h2&gt;
&lt;h4&gt;Examples: MySQL, PostgreSQL&lt;/h4&gt;
&lt;p&gt;This is the most common database out there. It has been around for a long time and it is very mature. You have a collection of 2D tables (rows and columns), very similar to Excel spreadsheets. However, you can add relationships between tables. Lets say you have the following two tables.&lt;/p&gt;
&lt;table style="width:400px"&gt;
&lt;tr&gt;
  &lt;th&gt;name&lt;/th&gt;
  &lt;th&gt;postal_code&lt;/th&gt;     
  &lt;th&gt;country_code&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="border-top: 1px solid black"&gt;
  &lt;td&gt;San Francisco&lt;/td&gt;
  &lt;td&gt;94109&lt;/td&gt;        
  &lt;td&gt;us&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Portland&lt;/td&gt;
  &lt;td&gt;97205&lt;/td&gt;      
  &lt;td&gt;us&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;table style="width:300px"&gt;
&lt;tr&gt;
  &lt;th&gt;country_code&lt;/th&gt;
  &lt;th&gt;country_name&lt;/th&gt;     
&lt;/tr&gt;
&lt;tr style="border-top: 1px solid black"&gt;
  &lt;td&gt;us&lt;/td&gt;
  &lt;td&gt;United States&lt;/td&gt;        
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;mx&lt;/td&gt;
  &lt;td&gt;Mexcio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;au&lt;/td&gt;
  &lt;td&gt;Australia&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;You can create a relationship between the two tables through the "country_code" attribute, which they both share. I prefer to think of these relational attributes as pointers to different tables. Probably because of my C++ background...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table Example" src="/images/table.png" /&gt;
&lt;p class=subnote&gt; Note: Image taken from &lt;u&gt;Seven Databases in Seven Weeks&lt;/u&gt; by Eric Redmond and Jim R. Wilson &lt;/p&gt;&lt;/p&gt;
&lt;p&gt;You have to define a &lt;b&gt;schema&lt;/b&gt; when you create your table, which declares what types of objects your database is going to store for that table. It's like defining your types in a static-type programming language. This can be annoying, since you have to architect your data ahead of time. Sometimes you don't know what kind of data you will want to store or how to query it ahead of time. Data normalization is a hard problem, which is removing duplicated data and finding which values are the right keys.&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
        &lt;img src='/images/schema.png'&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;center&gt;Schema&lt;/center&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
        &lt;img src='/images/schema_table.png'&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
     &lt;tr&gt;
        &lt;td&gt;
            &lt;center&gt;Table&lt;/center&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Because of the schema, relational databases are strict with what kind of data you put in them. If you define the type of 'dob' to be a "date", it has to take a particular format, MM/DD/YYYY. If you try to input a string or random numbers, the database will throw an error.&lt;/p&gt;
&lt;p&gt;What's nice and powerful about a relational-database are the queries you can make. You can use SQL to filter out data you care about by doing JOINS and getting a new table. This blog post has a great explanation of JOINS if anyone is interested in reading further.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/"&gt;A Visual Explanation of SQL Joins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The downsides are that relational databases are pretty inflexible. Because you have to define a schema ahead of time, you can't change what your database is going to store on the fly. However, you are guaranteed that the data will be what the schema says it will be, so you don't have to worry about validation. &lt;/p&gt;
&lt;p&gt;If you design your schema poorly, your database queries can get expensive. If you are doing a lot of joins to calculate your result, queries will take a long time. I can see as your website grows, it would be a lot of work to refactor your schema as your needs change.&lt;/p&gt;
&lt;p&gt;Another major downside of relational databases is scaling. You can improve the hardware of your server, which is expensive and may cause downtime. But this has a ceiling as well. You can try distributive computing, by breaking up your database into clusters (multiple computers). But splitting up your database is not that easy..&lt;/p&gt;
&lt;p&gt;A lot of relational-databases do &lt;strong&gt;sharding&lt;/strong&gt; to scale to multiple servers, which is a fancy term for splitting up the rows of the table in some logical way to different servers. &lt;/p&gt;
&lt;p&gt;&lt;img src="/images/sharding.jpg" alt="Sharding" style="width: 400px;"/&gt;
&lt;p class=subnote&gt; Crude, but awesome, example of sharding! Imagine this table has only one column and holds rows 'eggs, other crap, dogs, and fish'. Now dogs and fish are split out to they own separate servers, while egg and crap are within their own servers.
&lt;p class=subnote&gt; Note: Image taking from Shai Wininger from his &lt;a href="http://hackingshmacking.com/tag/haproxy/"&gt;blog entry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, figuring out how to split up your data in a relational database is not trivial. You will need to write sharding code, also known as a load balancer, that manages where your data and queries go. Handing JOIN, and UNION also gets super complicated, since you have to deal with which computers to look at, not just tables. Overall, it is a lot of work to scale a relational database.&lt;/p&gt;
&lt;p&gt;There are systems that do auto-sharding, like MySQL Cluster. But overall, relational databases get non-linear pretty quickly, causing latency issues, especially if your schema sucks. You can scale your relational database with big data, but it is a lot of work and/or a lot of money. Overall, there are better solutions out there if you know your database is going to grow massively. &lt;/p&gt;
&lt;h2&gt;Type: Key-Value Store&lt;/h2&gt;
&lt;h4&gt;Examples: Riak, HBase, Redis, memcached&lt;/h4&gt;
&lt;p&gt;Databases with the key-value model store data based on a key, which is VERY similar to a hash table. Because of the simplicity of their design, partitioning (horizontal scaling) is done really easily. Just split the data based on the hash function. &lt;/p&gt;
&lt;h3&gt;Redis and memcached&lt;/h3&gt;
&lt;p&gt;However, with memcached and Redis, all the data lives in RAM. Because of this, both databases are incredibly fast at reads and writes. This is great if you are working with time sensitive data, like stock prices. Redis can write to disk if it ever shuts down, so it stays persistence, but can't read from disk while its on. Memcached doesn't do this, so the data is lost when it shuts down. &lt;/p&gt;
&lt;p&gt;Redis is currently working on &lt;a href="http://redis.io/topics/cluster-tutorial"&gt;clustering in order to make it scalable&lt;/a&gt;, but it is in its alpha stages. Overall, I wouldn't use these databases as your main data store unless you are working on something small. Rather I would complement your web app with another database, like Riak, HBase or another relational/document database.&lt;/p&gt;
&lt;p&gt;Speaking of Riak and HBase, lets get into these key-value stores!&lt;/p&gt;
&lt;h3&gt;Riak&lt;/h3&gt;
&lt;p&gt;Riak is based on the Amazon Dynamo paper, which is apparently a famous paper according to Lindsey Kuper! It's a fairly new database, and it seems to be what all the cool kids are talking about nowadays. Riak and HBase are both meant to be used for distributed systems. They were designed with scaling in mind and thus are easily able to be partitioned out to different servers.&lt;/p&gt;
&lt;p&gt;What's cool about Riak is that any sever in your distributed system can read or write to the database! It is also fault-tolerant, which means you won't lose data if few of your servers die. But there is a trade-off. You can't get immediate consistency. This is because while you are writing to one server, it will take awhile to update your other servers about it. However, they do guarantee &lt;strong&gt;eventual consistency&lt;/strong&gt;. This basically means that if no one writes to the database for awhile, the database will eventually be consistent. Sounds kind of shady to me. However, this database is great if you need to be able to read and write quickly while giving up a little bit of consistency. &lt;/p&gt;
&lt;p&gt;Riak also has this awesome documentation where they annotate the Amazon Dynamo paper with how Riak was designed. If you are interested in learning the internals of Riak and how it is implemented, I highly recommend reading this!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.basho.com/riak/latest/theory/dynamo/"&gt;Dynamo: Amazon's Highly Available Key-Value Store with Riak annotations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Riak, you can query for data by giving it a key. You can also assign a secondary index during write-time, which is like giving the object a second key. So you can access the object by querying either key. You can even do a full on text-search to find your data!&lt;/p&gt;
&lt;p&gt;During this portion of the talk, I also learned how &lt;b&gt;MapReduce&lt;/b&gt; worked! This is how Riak implements the full-text search. I always thought of MapReduce as this fancy buzzword, but after Eric explained it, I felt silly not knowing about it sooner. I'd thought I share it with you all!&lt;/p&gt;
&lt;p&gt;Lets say you have a partitioned key-value store in four servers. In this key-value, we store a username and age. We want to calculate the average age of all the users we have for our website. One way to go about it is to query four servers for all the users and manually calculate the average age on the client machine. But that would be REALLY slow. However, with MapReduce, each server calculates the average age within their database and pushes that result upstream! We map the function to the servers, in which the servers run that function on each of their data-entries. Then it gets reduced to one value, which is returned to the client to combine.&lt;/p&gt;
&lt;h3&gt;HBase&lt;/h3&gt;
&lt;p&gt;HBase is also a key-value store that is based on Google's Bigtable paper, which is somewhat the opposite of Riak. It gives you immediate consistency, but compromises on availability for reads and writes. HBase uses a master/slave model where only certain servers are able to write. &lt;/p&gt;
&lt;p&gt;I want to write more, but this blog post is getting way to long. So tune in next week as I go into HBase, document databases and graph databases!&lt;/p&gt;</summary><category term="databases"></category><category term="web"></category><category term="hacker school"></category></entry><entry><title>Fun with Python and pip!</title><link href="http://litacho.github.io/pip-freeze.html" rel="alternate"></link><updated>2014-03-22T00:00:00-04:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-03-22:pip-freeze.html</id><summary type="html">&lt;p&gt;I have been programming in Python for quite awhile now. However, I am still
learning new things all the time about this language! I was able to download the
source code for CPython and learn a lot about the internals! I even committed
TWO patches to the CPython!&lt;/p&gt;
&lt;p&gt;David, a fellow Hacker Schooler, showed me a cool way to list out all my
dependences in my Python project! This is very useful for people who what to run
my Python project.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The command, pip freeze, prints out all the required modules that need to be
downloaded to run my project. I write that out to a text file
('requirements.txt') and save that to my project.&lt;/p&gt;
&lt;p&gt;Then if someone wants to run my program, rather than me listing out my modules
in a README or them looking at my code for the modules, all they need to do is
run&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and pip installs everything for you!!! How cool is that? Now all my friends who
are reviewing my code won't complain about how hard my projects are to setup!&lt;/p&gt;
&lt;p&gt;I had no idea pip was so powerful! &lt;code&gt;pip list -e&lt;/code&gt; lists all the out-dated
libraries you have in your project, &lt;code&gt;pip search &amp;lt;query&amp;gt;&lt;/code&gt; searches the PyPi
libraries for modules! I need to learn more about the program!&lt;/p&gt;
&lt;p&gt;I am working on this HUGE blog post about Databases. But it needs to be proof-read and refined. Hopefully I get that out soon!&lt;/p&gt;</summary><category term="pip"></category><category term="python"></category><category term="hacker school"></category></entry><entry><title>Setting Up a Pelican Blog</title><link href="http://litacho.github.io/blog-setup.html" rel="alternate"></link><updated>2014-03-16T00:00:00-04:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-03-16:blog-setup.html</id><summary type="html">&lt;p&gt;Setting up a Pelican blog was a pain. But I actually learned a lot about CSS and HTML. Right now, I am going through The Modern Web, which is giving me a lot of great tips about how to organize my website. I now know that the structure of my website is a terrible mess and I need to refactor it ASAP.&lt;/p&gt;
&lt;p&gt;I was going to write a tutorial about how to setup a Pelican blog, but this guy did a great job of it already.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.xlarrakoetxea.org/posts/2012/10/creating-a-blog-with-pelican/"&gt;Slok's Blog: Creating a blog with Pelican&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;He uses Fabric, a Python library for automation, to push his blog posts to the website. He also uses git's branching in order to handle his dev-website and his deployment website. I made my own ghetto script using 'os' commands, but now going to use fabric to clean up my blog workspace. &lt;/p&gt;</summary><category term="blog"></category><category term="hacker school"></category></entry><entry><title>Working with Elm</title><link href="http://litacho.github.io/working-with-elm.html" rel="alternate"></link><updated>2014-03-05T02:07:00-05:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-03-05:working-with-elm.html</id><summary type="html">&lt;p&gt;Last week, we had Evan Czaplicki as our resident! He is an awesome guy who
invented Elm, a functional language used for making interactive programs. It has
been awhile since I've done any functional programming. Basically, I've only
written ghetto Scheme code back in college (if you went to Berkeley, the class
was CS61A). But I've completely forgotten it.&lt;/p&gt;
&lt;p&gt;Evan gave a great talk for our batch, live coding a Mario game during the
presentation! You guys have to check it out!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://elm-lang.org/edit/examples/Intermediate/Mario.elm"&gt;Mario programmed in Elm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The talk was enough to get me to try to learn it, even though I  had no
intention on learning a functional programming language. I know this was a
distraction from learning web programming, but it's not like I was binging  on a
TV show...&lt;/p&gt;
&lt;p&gt;Elm is very similar to Haskell, ML, and OCaml. It is a statically-typed,
functional language. If you don't have Haskell installed, installing Elm  REALLY
sucks right now. Evan is working on making an installer. For now, I  mostly did
my coding on the interactive browser, which compiles the code on Evan's server.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://elm-lang.org/try"&gt;Try Elm!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Starting was SOOOoo hard. I just tried writing a linked-list...&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;LinkedList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cons&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinkedList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;generateList&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt; 
                 &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;Cons&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generateList&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generateList&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have no idea how long this took me to write. Basically, I write an algebraic
data type (ADT), which basically says I can be either "Empty" or a two element
data with "a" and another LinkedList. Cons is a Lisp thing, that just means it
constructs two elements. &lt;code&gt;generateList&lt;/code&gt; just recursively creates a  LinkedList
from &lt;code&gt;x&lt;/code&gt; to 0.&lt;/p&gt;
&lt;p&gt;I knew making any project was going to be death after trying to do this. I
decided I try to write a bouncy ball.. How hard could that be. This is what I
ended up creating.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://share-elm.com/sprout/5317940ee4b0f7cc0dd4e16d"&gt;Red Bouncing Ball&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have to admit, I had a lot of help from Evan. I had trouble understanding how 
data was flowing. He made these diagrams:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;
&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At first, these didn't make any sense. However, talking with Evan and reading
the &lt;a href="http://www.haskell.org/haskellwiki/Introduction"&gt;Haskell Introduction&lt;/a&gt; page definitely helped. First, parenthesis are
not needed to pass in arguments. They represent a grouping. So here, &lt;code&gt;add&lt;/code&gt; takes
in two arguments, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. &lt;code&gt;=&lt;/code&gt; here doesn't mean assignment. It represents a
definition of a function.&lt;/p&gt;
&lt;p&gt;With functional programming, it is a lot like a math equation. You have to think
about how the data flows through the method rather than saving state through
variables. Methods don't change or update the data. Data goes in through the
pipe, some transformations happen, and new data comes out of the pipe.  In the
&lt;code&gt;add&lt;/code&gt; method, you can very well give it just one argument. This will just return
an incomplete function rather than an &lt;code&gt;Int&lt;/code&gt;, which takes in one &lt;code&gt;Int&lt;/code&gt; rather
than two.&lt;/p&gt;
&lt;p&gt;So my next idea was to make a lot of these balls and make them collide with each
other. However, if you can't save state, then how are you suppose to update
balls' positions and velocities as they interact with each other?&lt;/p&gt;
&lt;p&gt;Basically, you make copies of everything... Seriously.&lt;/p&gt;
&lt;p&gt;You make a copy of the old state. Then you take one ball and compare that ball
to each ball in the old state (ignoring the ball itself in the old state). Then
the method outputs a new ball with the updated positions and velocities. You
then &lt;code&gt;map&lt;/code&gt; that to all the balls to get the new state.&lt;/p&gt;
&lt;p&gt;Here is the million-dollar code that does this, which I can't believe I wrote...&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;distance &lt;span class="p"&gt;(&lt;/span&gt;b1&lt;span class="p"&gt;,&lt;/span&gt;b2&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;b2.x&lt;span class="o"&gt;-&lt;/span&gt;b1.x&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;b2.y&lt;span class="o"&gt;-&lt;/span&gt;b1.y&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;

collision  oldBall newBall &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;not &lt;span class="p"&gt;(&lt;/span&gt;newBall &lt;span class="o"&gt;==&lt;/span&gt; oldBall&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;distance &lt;span class="p"&gt;(&lt;/span&gt;oldBall&lt;span class="p"&gt;,&lt;/span&gt;newBall&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;radius&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    then &lt;span class="p"&gt;{&lt;/span&gt;newBall &lt;span class="o"&gt;|&lt;/span&gt; vx &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;newBall.vx&lt;span class="p"&gt;,&lt;/span&gt;
                    vy &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;newBall.vy&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kr"&gt;else&lt;/span&gt; newBall

update ball &lt;span class="o"&gt;=&lt;/span&gt; foldl collision ball balls

map update balls
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;collision&lt;/code&gt; method checks to see if the oldBall collides with the newBall
using the distance formula. If so, then it reverses the velocities. If the
oldBall and newBall are equal, then it doesn't do anything, since the balls are
not allowed to collide with itself.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; method is iterating through the list of new balls, using foldl, to
check all the balls against one old ball.&lt;/p&gt;
&lt;p&gt;Lastly, I map the update function to all the old balls.&lt;/p&gt;
&lt;p&gt;Here is the result of my week-long effort. It came to about 73 lines of code! I
think that is impressive for a newbie learning functional programming.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/1j49ggu"&gt;Colliding Colorful Balls!&lt;/a&gt; - Click on the white canvas to make balls 
appear!&lt;/p&gt;</summary><category term="elm"></category><category term="website"></category><category term="hacker school"></category></entry><entry><title>2 Weeks into Hacker School! Progress on my Bittorrent Client</title><link href="http://litacho.github.io/2-weeks-into-hacker-school-progress-on-my-bittorrent-client.html" rel="alternate"></link><updated>2014-02-24T02:56:00-05:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-02-24:2-weeks-into-hacker-school-progress-on-my-bittorrent-client.html</id><summary type="html">&lt;p&gt;Wow! I can't believe two weeks has gone by! I feel like I am learning a
lot, but not learning enough. At the end of the day, I always want to
code more. It is so hard to focus on your projects while at Hacker
School though. There is SO much to do! So many interesting workshops and
so many people to do &lt;a href="https://www.hackerschool.com/manual#sec-pairing"&gt;pair-programming&lt;/a&gt; with! In order to make time
for this project, I ended up staying late or coding over the weekend. I
actually like this schedule, but we'll see how long I can keep it up.&lt;/p&gt;
&lt;h2 class="wsite-content-title" style="text-align: left;"&gt;Bittorrent Client&lt;/h2&gt;
&lt;p&gt;GREAT NEWS! I am now able to download files from Bittorrent network
using a tracker file. Unfortunately, all the data lives in RAM until I
download all the pieces, so it is limited. I also can't upload files to
other peers. I have been mostly testing my client on music files with no
peers, only seeds. But hey! It's a start.   &lt;/p&gt;
&lt;p&gt;I couldn't have done it without Kristen Widman's blog posts, who is also
a former Hacker Schooler!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.kristenwidman.com/blog/how-to-write-a-bittorrent-client-part-1/"&gt;How to Write a Bittorrent Client: Part 1&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.kristenwidman.com/blog/how-to-write-a-bittorrent-client-part-2/"&gt;How to Write a Bittorrent Client: Part 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thank you SO much Kristen for writing this tutorial! Without it, it
would have taken me forever to get to where I am now.  &lt;/p&gt;
&lt;p&gt;What I Learned:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Refactoring code is hard. &lt;br /&gt;
The Bittorrent Client is great for having small goals. However, at some
point, you reach a step and you realize you need to rewrite and organize
your code in order to move on. Adding more abstractions, get rid of
duplicate code, making it more object-orientated... it's a part of
life!   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Designing and structuring code can be a time suck. &lt;br /&gt;
Many times, I would just sit at my desk, wondering how I should go about
organizing my code when I really had no idea what the Bittorrent
specification was talking about. Then I would read someone else's
implementation and get confused even more. Should I make a Piece class
because someone else did? Should I make a Message class for each Message
code? This was getting in the way of me learning. In the end, I ended up
hard coding the bytes and sending it to a Peer to see what happened.
This helped me tremendously to figure out how the protocol works, and
then designed around that. How are you suppose to design something if
you don't understand the specifications?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wireshark is awesome, especially for learning and debugging.&lt;br /&gt;
I never really used Wireshark till this project, and IT IS F*CKING
AWESOME. Many thanks to Alan, a Hacker School Facilitator, for showing
me how it works!  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't look at other people's code too early on.&lt;br /&gt;
I feel like I got really scared of this project by looking at BitTorando
and other Hacker Schooler's Bittorrent implementations. But I am glad it
didn't deter me. I ended up writing it my own way.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Future Steps:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make it so that my program can upload files as well as download.&lt;/li&gt;
&lt;li&gt;Make it handle multiple peers, either with Twisted or writing my own
    event loop. (If I go with writing my own event loop, I should
    probably make it multi-threaded. But that is another beast)&lt;/li&gt;
&lt;li&gt;Make it so that all the pieces don't live in RAM, but stored on disk
    if the file is too big. (Can't download 8GB files at the moment...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even after my skepticism, I have to say that this project was really
cool. You have these small little goals that build up to a big software
project. Try connecting to the tracker server, and getting ip address
back. Then try to connect to one peer and send a handshake and so
forth.  &lt;/p&gt;
&lt;p&gt;I was running around when I was able to download an album and play it on
my computer. I can't believe I wrote software to do that!   &lt;/p&gt;
&lt;p&gt;MANY THANKS TO ALAN AND TOM, my two WONDERFUL facilitators at Hacker
School! This couldn't have happened without your enthusiasm for writing
Bittorrent Clients!  &lt;/p&gt;
&lt;p&gt;Even though this project was great, I want to try making a full stack
web app. Lets see how that goes!&lt;/p&gt;</summary><category term="bittorrent"></category><category term="hacker school"></category></entry><entry><title>Meeting with Mel</title><link href="http://litacho.github.io/meeting-with-mel.html" rel="alternate"></link><updated>2014-02-20T03:20:00-05:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-02-20:meeting-with-mel.html</id><summary type="html">&lt;p&gt;I met with Mel Chua today, 1-on-1, in order to get a better idea of how
I can make the most of my time at Hacker School. She mentioned intrinsic
motivation (motivation from within) versus extrinsic motivation
(motivation from the outside) in her what-kind-of-learner-are-you
workshop. Basically, you learn better if your motivation about a topic
comes intrinsically.   &lt;/p&gt;
&lt;p&gt;However, I've been having a hard time figuring out what topics motivates
me intrinsically. I feel like I've been choosing topics, workshops, and
projects that would be good for my career as a software developer versus
me being like, "oh WOW! This topic is SOOOoo fascinating! Let's spend
HOURS coding it up."   &lt;/p&gt;
&lt;p&gt;Talking with Mel, she and I have similar back stories. We both grew up
with strict Asian parents and were wired to do well in a structured
educational environment. We only had three real career options due to
family pressures (doctor, lawyer, engineer -- although Mel also had the
option of business school). We've both been good at listening to other
peoples' voices and mold ourselves to follow the rules of society,
whether it be academia or a big corporation.  &lt;/p&gt;
&lt;p&gt;Now coming to Hacker School, I was completely lost on what to do. There
was no one to tell me the guidelines. I didn't have a project that I was
passionate about walking in. Talking with Mel, I realized I've forgotten
how to listen to my inner voice. I am very good at listening to everyone
else, pieces their words together, and regurgitating it back. That is
why when I come to a new problem or topic I have no clue about, I get so
nervous, since I have no one else's voice to piece together. If someone
challenges my answer, I am quick to change it rather than listening to
my gut. Even my opinions about movies or restaurants are influenced by
friends or Yelp.   &lt;/p&gt;
&lt;p&gt;Mel recommended that I need to practice silence. Meditation is another
word for it, but basically I need to spend some time not cognitively
thinking and emptying my mind in order to hear my inner voice again. The
book “Women’s Ways of Knowing” has a section that describes the journey
through silence that one has to pass through to move from “parroting
others” to finding your authentic voice:  &lt;/p&gt;
&lt;p&gt;“To most women, the first steps on this journey do not feel like
progress. The voice diminishes in volume; it lacks authority. These
women lack even the derived authority of those who, having faith in
received knowledge, can assume as they parrot their elders that they
speak the truth. Lacking, also, the inner authority of the subjectivist,
they cannot cheerfully blurt out the first idea that springs to mind.
The inner voice turns critical; it tells them their ideas may be stupid.
Women at this position think before they speak; and, because their ideas
must measure up to certain objective standards, they speak in measured
tones. Often, they do not speak at all. But this is not a passive
silence; on the other side of this silence, reason is stirring.” (page
93)  &lt;/p&gt;
&lt;p&gt;It sounded weird and VERY uncomfortable. Based on her workshop, I found
that I was an active learner, where I need to continuously talk to
process information. In conversations, I need to fill the silence with
noise, so I usually end up rambling in order to fill the silence.   &lt;/p&gt;
&lt;p&gt;She realized this was going to be hard, but asked me to try it for a
week. Here is the schedule she suggested for me:  &lt;/p&gt;
&lt;p&gt;Morning:  Take up to 15 minutes to write 3 pages of whatever it is on
your mind. Basically do a brain dump to get all the clutter out. This
way, your brain is prepared for the silence. This is a practice called
“morning pages” and comes from the book “The Artist’s Way.”  &lt;/p&gt;
&lt;p&gt;Mid-Afternoon: 20 minutes of silence. If that is too hard, start with 5
minutes and work your way up. Also, this doesn't mean 20 minutes of no
talking and thinking about programming problems or what to do tomorrow.
Just empty your mind and make peace with the silence.  &lt;/p&gt;
&lt;p&gt;Evening: Examen. In order to become more sensitive to my own voice, I
have to practice listening to my “interior movements,” which are sort of
like emotions/feelings. These steps are adapted from spiritual exercises
composed by Ignatius of Loyola:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Feelings review! Take 10 minutes to reflect on any feelings you had
today and review them. Example: I was scared when this person asked to
pair programming with me!   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analysis! Try to think why these feelings came up or what situation
caused this feeling. See if you had this feeling before in the past and
if there are any patterns. Example: I am not comfortable pair
programming in a language I don't know. This happened back in college
when I was paired up with a partner who wanted to use an unfamiliar
language!  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next Steps: Identify future steps for tomorrow about how you can
discover your inner voice! If you have a feeling that you are not sure
how identify, try to recreate it in order to learn how to make that
feeling happen. If you want to overcome a fear, try to get
uncomfortable. Remember feelings that truly get you excited or happy,
and recreate those moments. If you have feelings you hate or piss you
off, log those too and see if you can find any patterns!  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am keeping an open mind and giving this a try! I hope I can find my
inner voice by practicing this everyday and find what I am truly
passionate about!  &lt;/p&gt;</summary><category term="life"></category><category term="career"></category></entry><entry><title>New York and First Day at Hacker School</title><link href="http://litacho.github.io/new-york-and-first-day-at-hacker-school.html" rel="alternate"></link><updated>2014-02-11T19:11:00-05:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2014-02-11:new-york-and-first-day-at-hacker-school.html</id><summary type="html">&lt;p&gt;If you haven't heard, I decided to quit my cushy job at Dreamworks
Animation and move to New York. It seems kind of crazy, but I spent all
of Christmas break and January deciding if I really want to do it. I've
been living in the Bay Area a long time, and I felt like I needed a
change.  &lt;/p&gt;
&lt;p&gt;I decided to attend Hacker School. I get to live in New York for three
months and work on whatever programming projects I want with like-minded
people.  &lt;/p&gt;
&lt;p&gt;Since I didn't post when I arrived, this post will be in two parts. &lt;/p&gt;
&lt;h2 class="wsite-content-title" style="text-align: left;"&gt;Part 1: Hanging out with Ben&lt;/h2&gt;
&lt;p&gt;Ben was my TA at Berkeley way back in 2008 and my project partner in the
same semester. After he graduated, we totally lost touch. But I remember
he moved to New York for work. Five years later, I decide I want to go
to Hacker School, and email him out of the blue to see if I can crash at
his place.  &lt;/p&gt;
&lt;p&gt;It was shocking how welcoming he was after all these years. It was like
he never left, and we just left off where we started. His roommate is
super into indie movies, particularly difficult movies to watch like
movies from David Lynch and Haneke. It was quite stimulating to analyze
movies in an intellectual level.&lt;/p&gt;
&lt;h2 class="wsite-content-title" style="text-align: left;"&gt;Part 2: Hacker School&lt;/h2&gt;
&lt;p&gt;During my first day at Hacker School, I definitely felt lost. They
basically give you some ground rules (which basically sums up to "don't
be a jerk") and let you do whatever you want. No instructions. No
direction.   &lt;/p&gt;
&lt;p&gt;I really am not that great without direction, so I felt really lost my
first day. But I decided to choose something and get started. I know I
want to learn web programming. So I decided to try out Flask, since I am
comfortable with Python.  &lt;/p&gt;
&lt;p&gt;I was able to make a microblog pretty quickly using this tutorial: &lt;br /&gt;
&lt;a href="http://flask.pocoo.org/docs/tutorial/"&gt;http://flask.pocoo.org/docs/tutorial/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;I want to extend this by being able to add images and dates. I also
found this tutorial that seems really useful: &lt;br /&gt;
&lt;a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The Flask Mega Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next half of the day, I moved onto learning WebGL. I found this website
which translates &lt;a href="http://nehe.gamedev.net/"&gt;NeHe Tutorials&lt;/a&gt; (ahhh the memories) to
WebGL: &lt;a href="http://learningwebgl.com/blog/?page\_id=1217"&gt;Learning WebGL&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;I did the first lesson and started to remember how much OpenGL sucks. By
sucks, I mean how tedious it is. So I copped out and decided to use
Three.js, which is a lot simpler! I was able to get something running
with 10 lines of code vs 200.   &lt;/p&gt;
&lt;p&gt;Going to continue learning Python and hopefully do some pair
programming!!! I need to work up the courage to do pair programming.&lt;/p&gt;</summary><category term="new york"></category><category term="webGL"></category><category term="hacker school"></category><category term="flask"></category></entry><entry><title>Hong Kong Style Egg Pudding</title><link href="http://litacho.github.io/hong-kong-style-egg-pudding.html" rel="alternate"></link><updated>2013-12-31T06:57:00-05:00</updated><author><name>Lita Cho</name></author><id>tag:litacho.github.io,2013-12-31:hong-kong-style-egg-pudding.html</id><summary type="html">&lt;p&gt;My boyfriend and I had egg pudding for the very first time while
traveling in Hong Kong last year. We ate it almost every day at the
Australian Milk Company while in Hong Kong.  &lt;/p&gt;
&lt;p&gt;When we got back, we soon discovered that San Mateo had a restaurant
that had HK-style egg pudding!  It wasn't consistent. Sometimes, it
would be overcooked. However, the establishment did fulfill our cravings
for the delicious dessert.  &lt;/p&gt;
&lt;p&gt;We ate at this place a lot. Like... a lot! However, each pudding was
$5! We ended up spending around $15-20 between the two of us, which
was painful on the wallet.  &lt;/p&gt;
&lt;p&gt;I decided this was getting ridiculous and to try to make this dish
myself. However, I was being pretty cheap and picky about buying
ramekins needed to make this dessert. It took me a year before my
boyfriend found the cheapest ramekins at Daiso for $1.50!   &lt;/p&gt;
&lt;p&gt;I ended up using this recipe as a base: &lt;a href="http://www.tastehongkong.com/recipes/chinese-egg-pudding-my-organic-dessert/"&gt;Hong Kong Pudding Recipe&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;It turned out to be a success!!! I am super excited. Now, I will NEVER
pay $5+tax+tip for egg pudding EVER AGAIN!&lt;/p&gt;
&lt;h2 style="text-align: left;"&gt;Lita's Recipe for Hong Kong Style Egg Pudding&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Ingredients&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two Eggs&lt;/li&gt;
&lt;li&gt;1 cup of Milk &lt;/li&gt;
&lt;li&gt;3 tablespoons of sugar (I used brown sugar)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sieve  &lt;/li&gt;
&lt;li&gt;2 individualize-size ramekins &lt;/li&gt;
&lt;li&gt;Steamer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Combine the milk and sugar into a pot and heat the mixture till the
sugar is fully dissolved. I used medium heat. Be careful not to over
heat or the milk will curdle.     &lt;/p&gt;
&lt;p&gt;In another bowl, beat the two eggs. Temper the egg with the milk mixture
you just made. (Basically add small doses of the milk mixture to the
eggs while beating so you don't end up cooking the eggs.) You can also
let the milk mixture cool and then add it to the eggs, but I was
impatient.   &lt;/p&gt;
&lt;p&gt;Strain the mixture through the sieve to get rid of the foams.   &lt;/p&gt;
&lt;p&gt;Place the mixture evenly in the ramekins.  &lt;/p&gt;
&lt;p&gt;Place the ramekins in the steamer.  &lt;/p&gt;
&lt;p&gt;Steam the mixture for 15-20 minutes at low heat. You kind of need to
experiment here, since the time is dependent on your stove. I basically
jiggled the ramekins till the mixture had a jelly-like consistency.   &lt;/p&gt;
&lt;p&gt;Here are some pictures of the results! Next, I am going to try making a
Paleo-ish version with almond milk and honey.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pudding" src="/images/2728904.jpg" /&gt; &lt;img alt="Pudding" src="/images/5567780.jpg" /&gt;
&lt;img alt="Pudding" src="/images/5645957.jpg" /&gt;&lt;/p&gt;</summary><category term="cooking"></category><category term="desserts"></category></entry></feed>